services:
  # Main Browser-Use Local Bridge API
  browser-use-bridge:
    build: .
    container_name: browser-use-bridge
    ports:
      - "8000:8000"
    environment:
      # Server Configuration
      - PORT=8000
      - HOST=0.0.0.0
      - LOG_LEVEL=info
      - ENVIRONMENT=production
      - DEBUG=false

      # Browser Configuration (Playwright)
      - BROWSER_HEADLESS=true
      - BROWSER_USER_DATA_PERSISTENCE=true
      - BROWSER_TYPE=chromium
      - PLAYWRIGHT_BROWSERS_PATH=/ms-playwright

      # Default AI Provider (configure your API keys via .env file)
      - DEFAULT_LLM_PROVIDER=openai
      - DEFAULT_MODEL=gpt-4o-mini

      # Media and Storage
      - MEDIA_DIR=/app/media
      - ENABLE_SCREENSHOTS=true
      - ENABLE_RECORDINGS=false

      # Task Configuration
      - MAX_CONCURRENT_TASKS=5
      - TASK_TIMEOUT_MINUTES=30

      # Security
      - TELEMETRY_ENABLED=false

      # Redis (if enabled)
      - REDIS_URL=redis://redis:6379
      - USE_REDIS=false
    volumes:
      # Persist media files
      - browser_media:/app/media
      # Persist browser data
      - browser_data:/app/browser_data
      # Persist logs
      - browser_logs:/app/logs
    env_file:
      - .env # Load additional environment variables from .env file
    restart: unless-stopped
    depends_on:
      - redis
    networks:
      - browser-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for task queuing and caching (optional)
  redis:
    image: redis:7-alpine
    container_name: browser-use-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - browser-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: browser-use-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro # SSL certificates
    depends_on:
      - browser-use-bridge
    restart: unless-stopped
    networks:
      - browser-network
    profiles:
      - production # Only start with --profile production

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: browser-use-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - browser-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: browser-use-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - browser-network
    profiles:
      - monitoring

volumes:
  browser_media:
    driver: local
  browser_data:
    driver: local
  browser_logs:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  browser-network:
    driver: bridge
